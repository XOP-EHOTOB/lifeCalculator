{"version":3,"sources":["panels/Home.js","App.js","index.js"],"names":["Home","id","fetchedUser","go","setAlert","useState","Date","maxDate","pcModule","setPcModule","smockModule","setSmockModule","day","month","year","date","setDate","pcYers","useRef","pcDays","smockYers","smockDays","smockMoney","pc","smock","align","top","min","max","getDay","getMonth","getFullYear","defaultValue","bdate","split","onDateChange","v","dayPlaceholder","monthPlaceholder","yearPlaceholder","getRef","onChange","current","checked","type","stretched","size","mode","onClick","console","log","App","activePanel","setActivePanel","setUser","popout","setPopout","useEffect","a","bridge","send","user","fetchData","e","currentTarget","dataset","to","text","actionsLayout","actions","title","autoclose","onClose","subscribe","detail","data","schemeAttribute","document","createAttribute","value","body","attributes","setNamedItem","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e487f463.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Panel, PanelHeader, DatePicker, Group, Checkbox, FormItem, Input, Div, Button, Text, ScreenSpinner } from '@vkontakte/vkui';\n\nconst Home = ({ id, go, fetchedUser, setAlert }) => {\n\tconst [maxDate, setMaxDate] = useState(new Date())\n\tconst [pcModule, setPcModule] = useState(false)\n\tconst [smockModule, setSmockModule] = useState(false)\n\tconst [date, setDate] = useState({day: 26, month: 11, year: 2000})\n\n\tconst pcYers = useRef(0)\n\tconst pcDays = useRef(0)\n\n\tconst smockYers = useRef(0)\n\tconst smockDays = useRef(0)\n\tconst smockMoney = useRef(0)\n\n\tconst pc = useRef(false)\n\tconst smock = useRef(false)\n\n\tconst startCalculation = () => {\n\t\tconsole.log(date);\n\n\t\tif (pcModule) {\n\t\t\tconsole.log(pcYers, pcDays);\n\n\t\t\tif (!+pcYers.current | !+pcDays.current) {\n\t\t\t\tsetAlert('Заполните все поля в разделе о использовании ПК')\n\t\t\t}\n\t\t}\n\n\t\tif (smockModule) {\n\t\t\tconsole.log(smockYers, smockDays, smockMoney);\n\t\t}\n\t}\n\n\n\tif (!fetchedUser) return (\n\t\t<Panel id={id}>\n\t\t\t<ScreenSpinner />\n\t\t</Panel>\n\t)\n\n\treturn (\n\t\t<Panel id={id}>\n\t\t\t<PanelHeader>Главная</PanelHeader>\n\t\t\t<Group>\n\t\t\t\t<Div>\n\t\t\t\t\t<Text align='center'>Введите точную дату своего рождения, заполните дополнительную информацию и жмите \"Вычислить\"!</Text>\n\t\t\t\t</Div>\n\t\t\t\n\t\t\t\t<FormItem top=\"Ваша дата рождения\">\n        \t\t\t<DatePicker\n        \t\t \t\tmin={{ day: 1, month: 1, year: 1901 }}\n        \t\t \t\tmax={{ day: maxDate.getDay(), month: maxDate.getMonth() + 1, year: maxDate.getFullYear()}}\n\n\t\t\t\t\t\tdefaultValue={{ \n\t\t\t\t\t\t\tday: fetchedUser.bdate ? +fetchedUser.bdate.split('.')[0] : 1, \n\t\t\t\t\t\t\tmonth: fetchedUser.bdate ? +fetchedUser.bdate.split('.')[1] : 1, \n\t\t\t\t\t\t\tyear: fetchedUser.bdate ? +fetchedUser.bdate.split('.')[2] ? +fetchedUser.bdate.split('.')[2] : 2000 : 2000 }}\n\t\t\t\t \t\tonDateChange={(v) => {\n\t\t\t\t\t\t\t  setDate(v)\n\t\t\t\t \t\t}}\n        \t\t \t\tdayPlaceholder=\"ДД\"\n        \t\t \t\tmonthPlaceholder=\"ММММ\"\n        \t\t \t\tyearPlaceholder=\"ГГГГ\"\n        \t\t\t/>\n      \t\t\t</FormItem>\n\n\t\t\t\t<Checkbox\n\t\t\t\t\tgetRef={pc}\n\t\t\t\t\tonChange={() => setPcModule(pc.current.checked)}>\n\t\t\t\t\t\tЯ провожу время за компьютером\n\t\t\t\t</Checkbox>\n\t\t\t\t{pcModule ?  \n\t\t\t\t<div>\n\t\t\t\t\t<FormItem top=\"Сколько лет вы пользуетесь пк\">\n        \t\t\t\t<Input type=\"number\" useRef={pcYers} />\n      \t\t\t\t</FormItem>\n\t\t\t\t\t<FormItem top=\"В среднем каждый день (часов)\">\n\t\t\t\t\t  \t<Input type=\"number\" useRef={pcDays} />\n\t\t\t\t\t</FormItem>\n\t\t\t\t</div>\n\t\t\t\t: null}\n\n\t\t\t\t<Checkbox\n\t\t\t\t\tgetRef={smock}\n\t\t\t\t\tonChange={() => setSmockModule(smock.current.checked)}>\n\t\t\t\t\t\tЯ курю\n\t\t\t\t</Checkbox>\n\t\t\t\t{smockModule ?  \n\t\t\t\t<div>\n\t\t\t\t\t<FormItem top=\"Сколько лет вы курите\">\n        \t\t\t\t<Input type=\"number\" useRef={smockYers} />\n      \t\t\t\t</FormItem>\n\t\t\t\t\t<FormItem top=\"В среднем каждый день (шт)\">\n\t\t\t\t\t  <Input type=\"number\" useRef={smockDays} />\n\t\t\t\t\t</FormItem>\n\t\t\t\t\t<FormItem top=\"Цена пачки сигорет (руб.)\">\n\t\t\t\t\t  <Input type=\"number\" useRef={smockMoney} />\n\t\t\t\t\t</FormItem>\n\t\t\t\t</div>\n\t\t\t\t: null}\n\n\t\t\t\t<Div align='center'>\n\t\t\t\t\t<Button \n\t\t\t\t\t\tstretched\n\t\t\t\t\t\talign='center'\n\t\t\t\t\t\tsize='l'\n\t\t\t\t\t\tmode='outline'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconsole.log(pcYers);\n\t\t\t\t\t\t\tstartCalculation()\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\tВычислить\n\t\t\t\t\t</Button>\n\t\t\t\t</Div>\n\t\t\t</Group>\n\t\t</Panel>\n\t)\n};\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport { View, ScreenSpinner, AdaptivityProvider, AppRoot, Alert } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tconst setAlert = (text) => {\n\t\tsetPopout(\n\t\t\t<Alert\n\t\t\t  actionsLayout=\"vertical\"\n\t\t\t  actions={[\n\t\t\t\t{\n\t\t\t\t  title: 'Ок',\n\t\t\t\t  autoclose: true,\n\t\t\t\t  mode: 'cancel',\n\t\t\t\t},\n\t\t\t  ]}\n\t\t\t  onClose={() => setPopout(null)} >\n\t\t\t  {text}\n\t\t\t</Alert>\n\t\t  )\n\t}\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<AdaptivityProvider>\n\t\t\t<AppRoot>\n\t\t\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} setAlert={setAlert} />\n\t\t\t\t</View>\n\t\t\t</AppRoot>\n\t\t</AdaptivityProvider>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\nimport './index.css'\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nbridge.subscribe(({ detail: { type, data }}) => {\n  if (type === 'VKWebAppUpdateConfig') {\n    const schemeAttribute = document.createAttribute('scheme');\n    schemeAttribute.value = 'space_gray';\n    document.body.attributes.setNamedItem(schemeAttribute);\n  }\n});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}